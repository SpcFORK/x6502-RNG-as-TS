{"version":3,"sources":["../src/crng.ts","../src/eobj.ts"],"sourcesContent":["/* \n; Returns a random 8-bit number in A (0-255), clobbers Y (unknown).\nprng:\n    lda seed+1          ; Load the high byte of seed into the accumulator\n    tay                 ; Copy the accumulator to the Y register (store high byte)\n    ; compute seed+1 ($39>>1 = %11100)\n    lsr                 ; Logical Shift Right the accumulator by 1 bit (dividing by 2)\n    lsr                 ; Logical Shift Right again by 1 bit\n    lsr                 ; And again (3rd time)\n    sta seed+1          ; Store the modified high byte back to seed+1\n    lsr                 ; Continue shifting right to further transform seed+1\n    eor seed+1          ; Exclusive OR accumulator with seed+1\n    lsr                 ; Shift right again\n    eor seed+1          ; Exclusive OR with seed+1 again\n    eor seed+0          ; Exclusive OR with seed+0, recombining low byte\n    sta seed+1          ; Store result back into seed+1\n    ; compute seed+0 ($39 = %111001)\n    tya                 ; Transfer Y register (original high byte) back to accumulator\n    sta seed+0          ; Store accumulator into seed+0\n    asl                 ; Arithmetic Shift Left (multiply by 2)\n    eor seed+0          ; Exclusive OR with seed+0\n    asl                 ; Arithmetic Shift Left again\n    eor seed+0          ; Exclusive OR with seed+0 again\n    asl                 ; Arithmetic Shift Left again\n    asl                 ; Arithmetic Shift Left again\n    asl                 ; Arithmetic Shift Left one more time\n    eor seed+0          ; Exclusive OR with seed+0 again\n    sta seed+0          ; Store result back into seed+0\n    rts                 ; Return from subroutine (end of function)\n*/\n\nimport eobj from './eobj';\n\nfunction* quickB8RNG255(seed: number, lim = -1): Generator<number, { error: unknown, type: string, LAST_VAL: unknown }, unknown> {\n\n  let a: number, y: number, SEED = seed & 0xFF;\n  function init() {\n    a = (SEED >> 1) & 0xFF;\n    y = a\n  }\n\n  function consume1() {\n    // compute seed+1 ($39>>1 = %11100)\n    // shift to consume zeroes on left...\n    a >>>= 3;\n    // now recreate the remaining bits in reverse order... %111\n    SEED = (SEED & ~0xFF00) | (a & 0xFF);\n    a >>>= 1;\n    a ^= (SEED >> 1) & 0xFF;\n    a >>>= 1;\n    a ^= (SEED >> 1) & 0xFF;\n    a ^= SEED && 0xFF;\n    SEED = (SEED & ~0xFF00) | (a & 0xFF);\n  }\n\n  function consume2() {\n    // compute seed+0 ($39 = %111001)\n    // original high byte time\n    a = y;\n    SEED = (SEED & ~0xFF) | (a & 0xFF);\n    a <<= 1;\n    a ^= SEED & 0xFF;\n    a <<= 3;\n    a ^= SEED & 0xFF;\n    SEED = (SEED & ~0xFF) | (a & 0xFF);\n  }\n\n  function doStep() {\n    init();\n    consume1();\n    consume2();\n    return SEED;\n  }\n\n  let LAST_VAL: number | undefined = void 0;\n  let I: number = lim;\n  let INP;\n  G: while (!!I--) while (INP = yield LAST_VAL = doStep()) {\n    if (typeof INP == 'boolean') if (INP) break G;\n    else if (typeof INP === 'number') SEED = INP;\n  }\n\n  return { error: void 0, type: 'success', LAST_VAL }\n}\n\nexport default eobj(quickB8RNG255, ['quickB8RNG255']).default;","function eobj<C extends Record<any, any> & unknown>(obj: C, names: string[] = []) {\n  if (!obj) throw new Error(`No object provided to eobj.`);\n\n  if (obj?.name) names.push(obj.name);\n\n  names.push('default');\n\n  let eo: Record<any, C> = {}\n  for (const name of names) {\n    eo[name] = obj;\n    try { (window as any)[name] = obj } catch { }\n  }\n\n  // I hate TS and builders having the need to warn\n  // 'OOPS! YOU CANT USE BOTH EXPORT PARADIGMS, WAHHH!'\n  try { (globalThis.eval)('module').exports = eo } catch { }\n\n  return eo\n}\n\n// Bootstarp !\nexport default eobj(eobj, ['eobj']).default;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,SAASI,EAA2CC,EAAQC,EAAkB,CAAC,EAAG,CAChF,GAAI,CAACD,EAAK,MAAM,IAAI,MAAM,6BAA6B,EAEnDA,GAAK,MAAMC,EAAM,KAAKD,EAAI,IAAI,EAElCC,EAAM,KAAK,SAAS,EAEpB,IAAIC,EAAqB,CAAC,EAC1B,QAAWC,KAAQF,EAAO,CACxBC,EAAGC,CAAI,EAAIH,EACX,GAAI,CAAG,OAAeG,CAAI,EAAIH,CAAI,MAAQ,CAAE,CAC9C,CAIA,GAAI,CAAG,WAAW,KAAM,QAAQ,EAAE,QAAUE,CAAG,MAAQ,CAAE,CAEzD,OAAOA,CACT,CAGA,IAAOE,EAAQL,EAAKA,EAAM,CAAC,MAAM,CAAC,EAAE,QDYpC,SAAUM,EAAcC,EAAcC,EAAM,GAAqF,CAE/H,IAAIC,EAAWC,EAAWC,EAAOJ,EAAO,IACxC,SAASK,GAAO,CACdH,EAAKE,GAAQ,EAAK,IAClBD,EAAID,CACN,CAEA,SAASI,GAAW,CAGlBJ,KAAO,EAEPE,EAAQA,EAAO,OAAYF,EAAI,IAC/BA,KAAO,EACPA,GAAME,GAAQ,EAAK,IACnBF,KAAO,EACPA,GAAME,GAAQ,EAAK,IACnBF,GAAKE,GAAQ,IACbA,EAAQA,EAAO,OAAYF,EAAI,GACjC,CAEA,SAASK,GAAW,CAGlBL,EAAIC,EACJC,EAAQA,EAAO,KAAUF,EAAI,IAC7BA,IAAM,EACNA,GAAKE,EAAO,IACZF,IAAM,EACNA,GAAKE,EAAO,IACZA,EAAQA,EAAO,KAAUF,EAAI,GAC/B,CAEA,SAASM,GAAS,CAChB,OAAAH,EAAK,EACLC,EAAS,EACTC,EAAS,EACFH,CACT,CAEA,IAAIK,EACAC,EAAYT,EACZU,EACJC,EAAG,KAASF,KAAK,KAAOC,EAAM,MAAMF,EAAWD,EAAO,GACpD,GAAI,OAAOG,GAAO,UAAW,IAAIA,EAAK,MAAMC,EACnC,OAAOD,GAAQ,WAAUP,EAAOO,GAG3C,MAAO,CAAE,MAAO,OAAQ,KAAM,UAAW,SAAAF,CAAS,CACpD,CAEA,IAAOI,EAAQC,EAAKf,EAAe,CAAC,eAAe,CAAC,EAAE","names":["crng_exports","__export","crng_default","__toCommonJS","eobj","obj","names","eo","name","eobj_default","quickB8RNG255","seed","lim","a","y","SEED","init","consume1","consume2","doStep","LAST_VAL","I","INP","G","crng_default","eobj_default"]}